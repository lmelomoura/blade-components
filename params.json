{"name":"Blade-components","tagline":"BladeComponents - Pacote para criação de componentes não acoplados no Laravel 5.1 utilizando diretivas do Blade","body":"##BladeComponents - Pacote para criação de componentes não acoplados no Laravel 5.1 utilizando diretivas do Blade\r\n\r\n![BladeComponents Logo](https://lh3.googleusercontent.com/UwWt_PBqE8kJUVRaKnv0NxCk3ISpcI3GRxa-MHUm2XDeKhWT4lP9wz8P9v5JkUYy8LWVZGZ2=w1896-h835-rw)\r\n\r\nEsse pacote permite criar de forma fácil e simplifica componentes com funções diversas para serem utilizados e reutilizados de maneira simples.\r\nCom a disponibilização de uma nova funcionalidade no Artisan, é possível com um único comando gerar toda a estrutura de funcionamento de seus novos componentes, separando todos os seus arquivos de forma organizada (PHP, CSS, HTML e Javascript).\r\n\r\n##Instalação\r\nO componente deve ser instalado (requerido) dentro do diretório padrão de sua aplicação através Composer, com o comando:\r\n\r\n    composer require moura/bladecomponents\r\n\r\n##Configuração\r\nApós a instalação algumas configurações precisam ser feitas para que o BladeComponents funcione e para que o Blade consiga renderizar de maneira correta seus componentes.\r\n\r\n####Configurando o service provider\r\nO `provider` do BladeComponents precisa ser adicionado ao vetor de `providers` dentro do arquivo `config/app.php`\r\n\r\n    Moura\\BladeComponents\\BladeComponentsProvider::class\r\n  \r\n>*Se o provider não for devidamente adicionado ao vetor de providers do Laravel, nenhum componente criado pelo BladeComponents irá funcionar*\r\n\r\n####Gerando o arquivo de configuração\r\nO BladeComponents, precisa de um arquivo de configuração. Para começar, precisamos criar esse arquivo de configuração em `config/bladecomponents.php`\r\nExecute o comando:\r\n\r\n    php artisan vendor:publish\r\n  \r\nEste comando irá criar o arquivo de configuração para sua aplicação. Você pode modificar esse arquivo para definir a sua própria configuração. \r\n\r\n>*Certifique-se de verificar se há alterações no arquivo de configuração original deste pacote entre os lançamentos de novas versões*\r\n\r\n##Utilização do BladeComponents\r\nA utilização do BladeComponents é bastante simples.\r\nPara criar um novo componente, execute o comando:\r\n\r\n    php artisan make:bladecomponent Name\r\n  \r\nEsse comando fará com que o BladeComponents gere toda a estrutura necessária para o funcionamento do novo componente.\r\nPor padrão, o componente é criado utilizando o nome passado e concatenado ao final a plavra `componente` \r\nAo final seguinte estrutura de diretórios e arquivos será criada em sua aplicação:\r\n\t\r\n    <app>\\\r\n    \t<BladeComponentes>\\\r\n    \t\t<Components>\\\r\n    \t\t\tNameComponent.php\r\n    \t\t<Scripts>\\\r\n    \t\t\t<css>\\\r\n    \t\t\t\tNameComponent.css\r\n    \t\t\t<js>\\\r\n    \t\t\t\tNameComponent.js\r\n    \t\t<Views>\\\r\n    \t\t\tNameComponent.blade.php\r\n\r\nAgora que o componente foi criado, ele precisa ser registrado no vetor de configuração de componentes que está localizado dentro do arquivo `config/bladecomponents.php`\r\nApós editar o arquivo `config/bladecomponents.php` e registrar o novo componente, ele estará pronto para ser implementado.\r\n\r\n>*É possível gerar um componente sem arquivos CSS e JS exclusivos. Bastar informar o parâmetro `--plain` para o comando do BladeComponents desta maneira:*\r\n  \r\n    php artisan make:bladecomponent Name --plain\r\n\r\n##Implementação do component\r\nA implementação do componente deve ser feita alterando os arquivo gerados de acordo com a necessidade do seu aplicativo.\r\n>*O BladeComponents permite que se use _diretivas do Blade_ dentro de todos os seus arquivos. É possível por exemplo utilizar diretivas de controle e laços de repetição _dentro dos arquivos JS e CSS_ de forma transparente*\r\n\r\n###A classe BladeComponent\r\nTodo componente criado pelo BladeComponents (exemplo `app/BladeComponents/Components/NameComponent.php`) herda uma classe abstrata própria. \r\nA estrutura padrão de classe de um componente é a seguinte:\r\n```\r\nclass NameComponent extends BladeComponent{\r\n  function inputs()\r\n  {\r\n    return [\r\n    \r\n    ];\r\n  }\r\n  \r\n  function buttons()\r\n  {\r\n    return [\r\n    \r\n    ];\r\n  }\r\n  \r\n  function data()\r\n  {\r\n    return [\r\n    \r\n    ];\r\n  }\r\n}\r\n```\r\nEssa classe abstrata herdada pelos components é a `BladeComponent` que implementa 3 métodos abstratos. São eles:\r\n\r\n##### inputs()\r\n\r\n    asbtract function inputs();\r\n  \r\n>*Essa função retorna ao BladeComponents um array associativo contendo o código HTML de todos os `inputs`, `labels`, `selects`, `radio buttons`, `checkboxes` e `textareas` que serão utilizados pelos arquivos de view, css e js através do vetor de inputs `$inputs['identificador']`*\r\n\r\nExemplo de implementação da `asbtract function inputs()` com um `label` e um `input` text:\r\n\r\n```\r\nfunction inputs()\r\n{\r\n  return [\r\n    'foolabel' => Form::label(\r\n        'fooSelect',\r\n        'Text for label',\r\n        [\r\n            'class' => 'foo-class'\r\n        ]\r\n    ),\r\n    'fooSelect' => Form::select(\r\n        'fooSelect',\r\n        [' '],\r\n        null,\r\n        [\r\n            'multiple' => null,\r\n            'class'    => 'foo-class'\r\n        ]\r\n    )\r\n  ];\r\n}\r\n```\r\n>*É extremamente recomendado utilizar a Form facade para gerar o HTML de todos os inputs e assim seguir o padrão Laravel para garantir o correto funcionamento do componente*\r\n\r\n##### buttons()\r\n\r\n    asbtract function buttons();\r\n\r\n>*Essa função retorna ao BladeComponents um array associativo contendo o código HTML de todos os `buttons` que serão utilizados pelos arquivos de view, css e js através do vetor de buttons `$buttons['identificador']`*\r\n\r\nExemplo de implementação da `asbtract function buttons()` com um submit `button` e um reset `button`:\r\n```\r\nfunction buttons()\r\n{\r\n  return [\r\n    'submitButton' => Form::submit('Click Me!'),\r\n    'resetButton => Form::reset('Clear form')\r\n  ];\r\n}\r\n```\r\n>*É extremamente recomendado utilizar a Form facade para gerar o HTML de todos os `buttons` e assim seguir o padrão Laravel para garantir o correto funcionamento do componente*  \r\n\r\n##### data()\r\n\r\n    asbtract function data();\r\n\r\n>*Essa função retorna ao BladeComponents um array associativo contendo objetos de dados que poderão ser utilizados para a construção dos `inputs` e `buttons` através da função `$this->getData('identificador')` ou pelos arquivos de view, css e js através do vetor de dados `$data['identificador']`*\r\n\r\nExemplo de implementação da `asbtract function data()` com `objeto` de dados qualquer:\r\n\r\n```\r\nfunction data()\r\n{\r\n  return [\r\n    'fooObject' => app(FooNameSpace\\FooClass)\r\n  ];\r\n}\r\n```\r\n\r\n\r\n###CSS de estilo do componente\r\nQuando o compoente é criado pelo BladeComponents sem que o parâmetro `--plain` seja passado ao comando, por padrão um arquivo CSS é criado para o novo componente.\r\n\r\n    app/BladeComponents/Scripts/css/ComponentName.css\r\n\r\nUtlize esse arquivo para criar os estilos prórpios de seu componente.\r\n\r\n#### Utilizando diretivas blade dentro de arquivos CSS\r\nO BladeComponents permite ao desenvolvedor que utilize diretivas blade dentro do arquivo CSS de stilo padrão do componente.\r\nExemplo de arquivo CSS contendo diretivas Blade:\r\n```\r\n.componentName-class div{\r\n  @if(array_key_exists('fooLabel',$inputs))\r\n    border-color : red;\r\n  @else\r\n    border-color : blue;\r\n  @endif;\r\n}\r\n```\r\n>*É possível utlizar todos os inputs, buttons e data objects que forão defidos. Todas as diretivas do blade estão disponíveis para utlização, permitindo que se crie um arquivo CSS `dinâmico`*\r\n\r\n###Javascript de controle do componente\r\n\r\nQuando o compoente é criado pelo BladeComponents sem que o parâmetro `--plain` seja passado ao comando, por padrão um arquivo JS é criado para o novo componente.\r\n\r\n    app/BladeComponents/Scripts/js/ComponentName.js\r\n\r\nUtlize esse arquivo para criar todo o javascript de controle de seu componente\r\n\r\n#### Utilizando diretivas blade dentro de arquivos JS\r\nO BladeComponents permite ao desenvolvedor que utilize diretivas blade dentro do arquivo JS de controle padrão do componente.\r\nExemplo de arquivo JS contendo diretivas Blade utilizando jQuery framework:\r\n```\r\n$(document).ready(function() {\r\n  @if(array_key_exists('fooLabel',$inputs))\r\n    console.log(\"ready!\");\r\n  @else\r\n    console.log(\"Not ready!\");\r\n  @endif;\r\n});\r\n```\r\n>*É possível utlizar todos os inputs, buttons e data objects que forão defidos. Todas as diretivas do blade estão disponíveis para utlização, permitindo que se crie um arquivo JS `dinâmico`*\r\n\r\n## Utilização dos componentes dentro da aplicação\r\nTodo componente criado e registrado no arquivo de configuração do BladeComponents, é também transformado em uma diretiva do Blade e sua utilização é muito simples.\r\nDentro de um arquivo de view qualquer, faça o seguinte:\r\n```\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n  @NameComponent('Name');\r\n</body>\r\n</html>\r\n```\r\n\r\n>*É possível que ao chamar o componente, seja passado como segundo parâmtro um vetor com variáveis para serem utilizadas na view padrão do componente*\r\n\r\n```\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n  @NameComponent('Name',['foo' => 'bar','other' => ObjectClass]);\r\n</body>\r\n</html>\r\n```\r\n","google":"UA-64975134-1","note":"Don't delete this file! It's used internally to help with page regeneration."}